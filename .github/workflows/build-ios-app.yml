name: "Build iOS app"

on:
  workflow_dispatch:
    inputs:
      apple_user:
        description: 'apple email'
        required: true
      apple_pass:
        description: 'apple app-password'
        required: true
      
      BUILD_CERTIFICATE_BASE64:
        description: 'certificate base64'
        required: true
      P12_PASSWORD:
        description: 'certificate passwd'
        required: true
      BUILD_PROVISION_PROFILE_BASE64:
        description: 'provision profile base64'
        required: true

      url:
        description: 'Url to zip of cordova project'
        required: true
      slug:
        description: ''
        required: true
      name:
        description: ''
        required: true
      package:
        description: ''
        required: true
      team_id:
        description: ''
        required: true
      profile_id:
        description: ''
        required: true
      
jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ github.event.inputs.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ github.event.inputs.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ github.event.inputs.BUILD_PROVISION_PROFILE_BASE64 }}
          
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -hex 6)

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security set-keychain-settings -u -t 2000 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      - name: prepare project
        env:
          url: ${{ github.event.inputs.url }}
          slug: ${{ github.event.inputs.slug }}
          name: ${{ github.event.inputs.name }}
          package: ${{ github.event.inputs.package }}
          team_id: ${{ github.event.inputs.team_id }}
          profile_id: ${{ github.event.inputs.profile_id }}

        run: |
          # install deps
          brew install php imagemagic
          npm install -g cordova

          # download project
          mkdir myproj
          cd myproj
          wget -O app.zip "$url"
          unzip -qo app.zip && rm -f app.zip
          cd *
          npm install
          cordova plugin save
          cordova platform add ios

          # fix icons
          find res/ios -name "*.png" -exec convert "{}" -alpha off "{}" \;
          find "platforms/ios/$name/Assets.xcassets/AppIcon.appiconset" -name "*.png" -exec convert "{}" -alpha off "{}" \;

          # edit files
          php ../../edit.php "$slug" "$name" "$package" "$team_id" "$profile_id" "$(pwd)"

          echo "::set-env name=APP_DIR::$(pwd)"
          
      - name: build archive and export ipa
        env:
          slug: ${{ github.event.inputs.slug }}
          name: ${{ github.event.inputs.name }}
          TELE_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELE_CHATID: ${{ secrets.TELEGRAM_CHAT_ID }}

        run: |
          cd $APP_DIR/platforms/ios
          #export CODE_SIGN_KEYCHAIN=login1.keychain

          xcodebuild archive \
            -workspace "$name.xcworkspace" \
            -scheme "$name" \
            -destination generic/platform=iOS \
            -archivePath ./build/$slug.xcarchive \
            -configuration Release

          [[ -d ./build/$slug.xcarchive ]] xcodebuild -exportArchive \
            -archivePath ./build/$slug.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath ./build

          # send to telegram
          [[ -f "build/$name.ipa" ]] && curl -F chat_id="$TELE_CHATID" -F document=@"./build/$name.ipa" "https://api.telegram.org/bot$TELE_TOKEN/sendDocument" || curl -s -X POST "https://api.telegram.org/bot$TELE_TOKEN/sendMessage" -d "chat_id=$TELE_CHATID" -d "text=failed-export-$slug.ipa";

      - name: Upload application
        env:
          slug: ${{ github.event.inputs.slug }}
          name: ${{ github.event.inputs.name }}
          apple_user: ${{ github.event.inputs.apple_user }}
          apple_pass: ${{ github.event.inputs.apple_pass }}
          TELE_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELE_CHATID: ${{ secrets.TELEGRAM_CHAT_ID }}

        run: |
          echo "upload ipa"
          cd $APP_DIR/platforms/ios

          # upload ipa
          [[ -f "build/$name.ipa" ]] && xcrun altool --upload-app --type ios --file "build/$name.ipa" --username $apple_user --password $apple_pass > log.txt 2>&1 || echo "not exist .ipa file"

          # check log
          [[ -f log.txt && $(cat log.txt) == *"UPLOAD SUCCEEDED"* ]] && curl -s -X POST "https://api.telegram.org/bot$TELE_TOKEN/sendMessage" -d "chat_id=$TELE_CHATID" -d "text=upload-sucess-$slug.ipa" || curl -s -X POST "https://api.telegram.org/bot$TELE_TOKEN/sendMessage" -d "chat_id=$TELE_CHATID" -d "text=upload-failed-$slug.ipa";
      #- name: Upload application
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: app
      #    path: ${{ runner.temp }}/build/I\ am\ Groot.ipa
          # you can also archive the entire directory 
          # path: ${{ runner.temp }}/build
      #    retention-days: 3
